lib = library(identifier: "jenkins@20211123", retriever: legacySCM(scm))

pipeline {
    options {
        timeout(time: 4, unit: 'HOURS')
    }
    agent none
    environment {
        AGENT_X64 = 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
        AGENT_ARM64 = 'Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host'
        IMAGE_RPM = 'opensearchstaging/ci-runner:ci-runner-rockylinux8-opensearch-build-v2' // required for rpm to create digest sha256 correctly with rpm 4.12+
    }
    parameters {
        string(
            name: 'COMPONENT_NAME',
            description: 'If this field contains one or more component names (e.g. OpenSearch common-utils ...), will build with "--component <COMPONENT_NAME> ...", else build everything in the INPUT_MANIFEST.',
            trim: true
        )
        string(
            name: 'INPUT_MANIFEST',
            description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0.yml.',
            trim: true
        )
        string(
            name: 'TEST_MANIFEST',
            description: 'Test manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0-test.yml.',
            trim: true
        )
        string(
            name: 'INTEG_TEST_JOB_NAME',
            description: "Name of integration test job that will be triggered, e.g. Playground/integ-test. A non-null empty value here will skip integration tests.",
            defaultValue: "integ-test",
            trim: true
        )
        string(
            name: 'BWC_TEST_JOB_NAME',
            description: "Name of backwards compatibility test job that will be triggered, e.g. Playground/bwc-test.  A non-null empty value here will skip BWC tests.",
            defaultValue: "bwc-test",
            trim: true
        )
        choice(
            name: 'BUILD_DOCKER',
            description: 'Build docker image or not with options.',
            choices: ['build_docker', 'build_docker_with_build_number_tag', 'do_not_build_docker'],
        )
        booleanParam(
            name: 'PUBLISH_NOTIFICATION',
            description: 'Publish the status of this build job or not.',
            defaultValue: true
        )
    }
    stages {
        stage('detect docker image + args') {
            agent {
                docker {
                    label AGENT_X64
                    image 'alpine:3'
                    alwaysPull true
                }
            }
            steps {
                script {
                    dockerAgent = detectDockerAgent()
                    currentBuild.description = INPUT_MANIFEST
                }
            }
        }
        stage('build') {
                stage('build-and-test-x64-windows-zip') {
                    agent {
                        node {
                            label 'Jenkins-Agent-Windows2016-X64-M52xlarge-Single-Host'
                        }
                    }
                    steps {
                        script {
                            def buildManifestObj = buildAssembleUpload(
                                componentName: "${COMPONENT_NAME}",
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                distribution: "tar"
                            )
                            String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                            String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                            env.ARTIFACT_URL_X64_TAR = artifactUrl
                            env.INDEX_FILE_PATH = buildManifestObj.getIndexFileRoot("${JOB_NAME}")

                            echo "buildManifestUrl (x64, tar): ${buildManifestUrl}"
                            echo "artifactUrl (x64, tar): ${artifactUrl}"
                        }
                    }
                    post {
                        always {      
                                postCleanup()
                            }
                        }
                    }
                }
        stage('update index file') {
            agent {
                docker {
                    label AGENT_X64
                    image dockerAgent.image
                    args dockerAgent.args
                    alwaysPull true
                }
            }
            steps {
                script {
                    uploadIndexFile(
                        indexFilePath: env.INDEX_FILE_PATH
                    )
                }
            }
        }
        stage('docker build') {
            when {
                beforeAgent true
                expression { 
                    params.BUILD_DOCKER != 'do_not_build_docker'
                }
            }
            agent {
                docker {
                    label AGENT_X64
                    image dockerAgent.image
                    args dockerAgent.args
                    alwaysPull true
                }
            }
            steps {
                script {
                    echo "env.ARTIFACT_URL_X64_TAR: ${env.ARTIFACT_URL_X64_TAR}"
                    echo "env.ARTIFACT_URL_ARM64_TAR: ${env.ARTIFACT_URL_ARM64_TAR}"
                    
                    buildDockerImage(
                        inputManifest: "manifests/${INPUT_MANIFEST}",
                        buildNumber: "${BUILD_NUMBER}",
                        buildOption: "${BUILD_DOCKER}",
                        artifactUrlX64: env.ARTIFACT_URL_X64_TAR,
                        artifactUrlArm64: env.ARTIFACT_URL_ARM64_TAR
                    )
                }
            }
        }
    }
    post {
        success {
            node(AGENT_X64) {
                script {
                    if (params.PUBLISH_NOTIFICATION) { 
                        def stashed = lib.jenkins.Messages.new(this).get([
                            'build-and-test-x64-tar', 
                            'assemble-archive-and-test-linux-x64-rpm',
                            'build-and-test-arm64-tar', 
                            'assemble-archive-and-test-linux-arm64-rpm'
                        ])

                        publishNotification(
                            icon: ':white_check_mark:',
                            message: 'Successful Build',
                            extra: stashed,
                            credentialsId: 'jenkins-build-notice-webhook',
                            manifest: "${INPUT_MANIFEST}"
                        )
                    }

                    postCleanup()
                }
            }
        }
        failure {
            node(AGENT_X64) {
                script {
                    if (params.PUBLISH_NOTIFICATION) { 
                        publishNotification(
                            icon: ':warning:',
                            message: buildFailureMessage(),
                            credentialsId: 'jenkins-build-notice-webhook',
                            manifest: "${INPUT_MANIFEST}"
                        )
                    }

                    postCleanup()
                }
            }
        }
    }
}

