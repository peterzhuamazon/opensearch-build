/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

lib = library(identifier: 'jenkins@6.4.8', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/opensearch-project/opensearch-build-libraries.git',
]))

pipeline {
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    agent none
    environment {
        AGENT_LINUX_X64 = 'Jenkins-Agent-AL2023-X64-C54xlarge-Docker-Host'
        AGENT_LINUX_ARM64 = 'Jenkins-Agent-AL2023-Arm64-C6g4xlarge-Docker-Host'
        AGENT_WINDOWS_X64 = 'Jenkins-Agent-Windows2019-X64-M54xlarge-Docker-Host'
        IMAGE_LINUX = 'opensearchstaging/ci-runner:ci-runner-al2-opensearch-build-v1'
        IMAGE_WINDOWS = 'opensearchstaging/ci-runner:ci-runner-windows2019-opensearch-build-v1'
        ARTIFACT_BUCKET_NAME = credentials('jenkins-artifact-bucket-name')
    }
    parameters {
        string(
            name: 'INPUT_MANIFEST',
            description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0.yml.',
            trim: true
        )
    }
    stages {
        stage('verify-parameters') {
            agent {
                docker {
                    label AGENT_LINUX_X64
                    image 'docker/library/alpine:3'
                    registryUrl 'https://public.ecr.aws/'
                    alwaysPull true
                }
            }
            steps {
                script {
                    //dockerAgent = detectDockerAgent()
                    //env.javaVersionNumber = dockerAgent.javaVersion.replaceAll("[^0-9]", "") // Only get number

                    if (INPUT_MANIFEST == '' || !fileExists("manifests/${INPUT_MANIFEST}")) {
                        currentBuild.result = 'ABORTED'
                        error("Input manifest was not provided or not found in manifests/${TEST_MANIFEST}.")
                    }

                    currentBuild.description = INPUT_MANIFEST

                    def inputManifestObj = lib.jenkins.InputManifest.new(readYaml(file: "manifests/${INPUT_MANIFEST}))
                }
            }
        }
        stage('Build OpenSearch-min Snapshots') {
            parallel {
                stage('linux-x64') {
                    agent {
                        docker {
                            label AGENT_LINUX_X64
                            image IMAGE_LINUX
                            args dockerAgent.args
                            registryUrl 'https://public.ecr.aws/'
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            sh """#!/bin/bash
                                echo hahaha

                            """
                            //uploadToS3(
                            //        sourcePath: "$WORKSPACE/artifacts",
                            //        bucket: "${ARTIFACT_BUCKET_NAME}",
                            //        path: finalUploadPath
                            //)
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
                //stage('linux-arm64-tar') {
                //    agent {
                //        docker {
                //            label AGENT_LINUX_ARM64
                //            image dockerAgent.image
                //            args dockerAgent.args
                //            registryUrl 'https://public.ecr.aws/'
                //            alwaysPull true
                //        }
                //    }
                //    steps {
                //        script {
                //            buildManifest(
                //                componentName: "OpenSearch",
                //                inputManifest: "manifests/${INPUT_MANIFEST}",
                //                platform: 'linux',
                //                architecture: 'arm64',
                //                distribution: 'tar',
                //                snapshot: true
                //            )
                //            echo("Uploading min snapshots to S3")
                //            uploadMinSnapshotsToS3(
                //                fileActions: [createSha512Checksums()],
                //                distribution: 'tar'
                //            )
                //        }
                //    }
                //    post {
                //        always {
                //            postCleanup()
                //        }
                //    }
                //}
                //stage('windows-x64-zip') {
                //    agent {
                //        docker {
                //            label AGENT_WINDOWS_X64
                //            image IMAGE_WINDOWS_ZIP
                //            registryUrl 'https://public.ecr.aws/'
                //            alwaysPull true
                //        }
                //    }
                //    steps {
                //        script {
                //            echo("Switching to Java ${env.javaVersionNumber} on Windows Docker Container")
                //            sh("scoop reset `scoop list jdk | cut -d ' ' -f1 | grep ${env.javaVersionNumber} | head -1`")
                //            buildManifest(
                //                componentName: "OpenSearch",
                //                inputManifest: "manifests/${INPUT_MANIFEST}",
                //                platform: 'windows',
                //                architecture: 'x64',
                //                distribution: 'zip',
                //                snapshot: true
                //            )
                //            echo("Uploading windows min snapshots to S3")
                //            uploadMinSnapshotsToS3(
                //                fileActions: [createSha512Checksums()],
                //                distribution: 'zip'
                //            )
                //        }
                //    }
                //    post {
                //        always {
                //            postCleanup()
                //        }
                //    }
                //}
            }
        }
    }
}
